# Generated by Django 5.2.6 on 2025-09-30 11:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('career', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Biography')),
                ('avatar', models.ImageField(blank=True, upload_to='avatars/%Y/%m/', verbose_name='Avatar')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth date')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Location')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('student_id', models.CharField(blank=True, max_length=20, unique=True, verbose_name='Student ID')),
                ('enrollment_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Enrollment year')),
                ('current_semester', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Current semester')),
                ('total_points', models.PositiveIntegerField(default=0, verbose_name='Total points')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='User level')),
                ('experience_points', models.PositiveIntegerField(default=0, verbose_name='Experience points')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Verified account')),
                ('is_mentor', models.BooleanField(default=False, verbose_name='Is mentor')),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('friends', 'Friends Only'), ('private', 'Private')], default='public', max_length=10, verbose_name='Profile visibility')),
                ('show_email', models.BooleanField(default=False, verbose_name='Show email publicly')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('career', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='career.career', verbose_name='Career')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserPointsHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='Points')),
                ('source', models.CharField(choices=[('post', 'Created Post'), ('comment', 'Created Comment'), ('like_received', 'Received Like'), ('note_shared', 'Shared Note'), ('achievement', 'Achievement Unlocked'), ('login_streak', 'Login Streak'), ('help_others', 'Helped Others'), ('admin_bonus', 'Admin Bonus')], max_length=20, verbose_name='Source')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_history', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Points History',
                'verbose_name_plural': 'Points History',
                'ordering': ['-created_at'],
            },
        ),
    ]
